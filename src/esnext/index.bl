(#%codegen "./kernel")

(macro
 (array
   extendEnv
   (function (array form)
     (block
       (= (. (. this (quote env)) ((. Symbol (quote for)) (. form 1)))
          (require (. form 2)))
       (return
         (array
           ((. Symbol (quote for)) "array")
           (array
             (array
               ((. Symbol (quote for)) ".")
               ((. Symbol (quote for)) "Symbol")
               (array
                 ((. Symbol (quote for)) "quote")
                 ((. Symbol (quote for)) "for")))
             (. form 1))
           (array ((. Symbol (quote for)) "require") (. form 2))))))))

(=
 (. module (quote exports))
 (object
   (array
     (quote env)
     (object
       (array ((. Symbol (quote for)) ".") (require "./dot"))
       (array ((. Symbol (quote for)) "=") (require "./assignment"))
       (array ((. Symbol (quote for)) "array") (require "./array"))
       (array ((. Symbol (quote for)) "block") (require "./block"))
       (array ((. Symbol (quote for)) "call") (require "./call"))
       (array ((. Symbol (quote for)) "const") (require "./const"))
       (array ((. Symbol (quote for)) "function") (require "./function"))
       (array ((. Symbol (quote for)) "new") (require "./new"))
       (array ((. Symbol (quote for)) "number") (require "./number"))
       (array ((. Symbol (quote for)) "object") (require "./object"))
       (array ((. Symbol (quote for)) "return") (require "./return"))
       (array ((. Symbol (quote for)) "string") (require "./string"))
       (array ((. Symbol (quote for)) "symbol") (require "./symbol"))
       (array ((. Symbol (quote for)) "undefined") (require "./undefined"))
       (extendEnv "+" "./plus")))))
