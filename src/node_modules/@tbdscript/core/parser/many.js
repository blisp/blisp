/**
 * @Callback Reduce
 * @param {any} acc - Accumulated value
 * @param {any} result - Result of the parser
 * @param {number} pos - Position of the input stream
 * @param {string} input - The input stream
 */

/**
 * Calls parser repeatedly consequently calling reduce with the output until
 * parser fails. Calls eok if parser failed without consuming input, otherwise
 * calls cok with the accumulated value from reduce.
 * @param { Parser } parser - Parser to call many times
 * @param { init } any - The initial value for the reduce function.
 * @param { Reduce } reduce - The reducer function
 */
module.exports = function many(parser, init, reduce) {
  return function(input, pos, cok, _, eok) {
    var ppos = pos,
      pacc = init,
      done = false

    function pcok(result, pos, input) {
      ppos = pos
      pacc = reduce(pacc, result, pos, input)
    }

    function perr() {
      done = true
    }

    function peok(result) {
      throw new Error(
        "Parser in many consumed no input: " + result + " at position: " + pos
      )
    }

    while (!done) {
      parser(input, ppos, pcok, perr, peok, perr)
    }

    return (ppos === pos ? eok : cok)(pacc, ppos, input)
  }
}
