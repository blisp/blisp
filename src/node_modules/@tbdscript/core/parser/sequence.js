/**
 * Takes sequence of parsers and calls each parser in turn reducing the results
 * with reduce.
 * @param {...parser[]} parsers - The parsers to be called in sequence
 * @param {any} init - The initial value for the reduce acc
 * @param {Reduce} reduce - The reduce function that will be called with the
 *   result of each parser
 */
module.exports = function sequence() {
  var args = []
  args.push.apply(args, arguments)
  var parsers = args.slice(0, args.length - 2)
  var init = args[args.length - 2]
  var reduce = args[args.length - 1]
  return function(input, pos, cok, cerr, _, eerr) {
    var ppos = pos,
      pacc = init,
      out = eerr
    function pcok(result, pos, input) {
      ppos = pos
      pacc = reduce(pacc, result, pos, input)
      out = cok
    }

    function pcerr(result, pos) {
      pacc = result
      ppos = pos
      out = cerr
    }

    function peok(result, pos, input) {
      ppos = pos
      pacc = reduce(pacc, result, pos, input)
    }

    function peerr(result, pos) {
      pacc = result
      ppos = pos
      out = out === cok ? cerr : eerr
    }

    for (var i = 0; i !== parsers.length; i++) {
      var parser = parsers[i]
      parser(input, ppos, pcok, pcerr, peok, peerr)
      if (out !== cok) {
        break
      }
    }

    return out(pacc, ppos, input)
  }
}
