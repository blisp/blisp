const compile = require("@blisp/compiler/compile")
module.exports = function macroForm(type, id, ...args) {
  function macro(form) {
    return args.reduce(
      (syntax, arg, index) => {
        syntax[arg] = compile.call(this, form[index + 1])
        return syntax
      },
      { type, loc: form.loc }
    )
  }
  macro.type = type
  macro.helpers = {
    nth(form, n) {
      return form[args[n]]
    },
    length(form) {
      return args + 1
    },
  }
  return { [Symbol.for(id)]: macro }
}
