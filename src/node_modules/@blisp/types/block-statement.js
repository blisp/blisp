import { isExpression, isModuleDeclaration } from "@babel/types"

function BlockStatement(form, env) {
  return {
    type: "BlockStatement",
    body: form.arguments.map((stmt) => {
      const expanded = expand(stmt, env)
      if (isExpression(stmt)) {
        switch (stmt.type) {
          case "FunctionExpression":
            // TODO: verify id
            return { ...expanded, type: "FunctionDeclaration" }
          default:
            return { type: "ExpressionStatement", expression: expanded }
        }
      }
      return expanded
    }),
  }
}

BlockStatement.type = "BlockStatement"
BlockStatement.helpers = {
  nth(form, n) {
    return n === 0 ? { type: "Identifier", name: "block" } : form.body[n - 1]
  },
  length(form) {
    return form.body.length + 1
  },
}

module.exports = { block: BlockStatement }
