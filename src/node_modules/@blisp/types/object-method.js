function nth(form, n) {
  switch (form.type) {
    case "CallExpression":
      return n === 0 ? form.callee : form.arguments[n - 1]
    case "ArrayExpression":
      return form.elements[n]
  }
  return undefined
}

function length(form) {
  switch (form.type) {
    case "CallExpression":
      return form.arguments.length + 1
    case "ArrayExpression":
      return form.elements[n]
  }
}

function mapForm(form, cb) {
  const result = []
  for (let i = 0; i !== length(form); i++) {
    result.push(cb(nth(form, i), i, form))
  }
}

function ObjectMethod(form, env) {
  return {
    type: "ObjectMethod",
    key: form.arguments[0],
    params:
      (form.arguments[1].type !== "NullLiteral" &&
        mapForm(form.arguments[1], (param) => expand(param, env))) ||
      [],
    body: expand(form.arguments[2], env),
  }
}

ObjectMethod.type = "ObjectMethod"
ObjectMethod.helpers = {
  nth(form, n) {
    switch (n) {
      case 0:
        return { type: "Identifier", name: "method" }
      case 1:
        return form.key
      case 2:
        return form.params
      case 3:
        return form.body
    }
  },
  length() {
    return 4
  },
}

module.exports = { method: ObjectMethod }
