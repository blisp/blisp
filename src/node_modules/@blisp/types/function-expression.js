const expand = require("@blisp/expander/expand")

const cache = new WeakMap()
function toDatum(form) {
  if (cache.has(form)) {
    return cache.get(form)
  }
  const datum = []
  if (form.async) {
    datum.push({ type: "Identifier", name: "async" })
  }
  datum.push({
    type: "Identifier",
    name: form.generator ? "function*" : "function",
  })
  if (form.id) {
    datum.push(form.id)
  }
  datum.push(form.params)
  datum.push(form.body)
  cache.set(form, datum)
  return datum
}

function nth(form, n) {
  switch (form.type) {
    case "CallExpression":
      return n === 0 ? form.callee : form.arguments[n - 1]
    case "ArrayExpression":
      return form.elements[n]
  }
  return undefined
}

function length(form) {
  switch (form.type) {
    case "CallExpression":
      return form.arguments.length + 1
    case "ArrayExpression":
      return form.elements[n]
  }
}

function mapForm(form, cb) {
  const result = []
  for (let i = 0; i !== length(form); i++) {
    result.push(cb(nth(form, i), i, form))
  }
}

function FunctionExpression(form, env) {
  if (form.callee === "async") {
    return {
      ...FunctionExpression({
        callee: form.arguments[0],
        arguments: form.arguments.slice(1),
      }),
      async: true,
    }
  }
  return {
    type: "FunctionExpression",
    id:
      form.arguments.length === 3 ? expand(form.arguments[0], env) : undefined,
    params:
      (form.arguments[form.arguments.length === 3 ? 1 : 0].type !==
        "NullLiteral" &&
        mapForm(form.arguments[form.arguments.length === 3 ? 1 : 0], (param) =>
          expand(param, env)
        )) ||
      [],
    body: expand(form.arguments[form.arguments.length === 3 ? 2 : 1]),
    generator: form.callee.name === "function*",
    loc: form.loc,
  }
}

FunctionExpression.type = "FunctionExpression"
FunctionExpression.helpers = {
  nth(form, n) {
    return toDatum(form)[n]
  },
  length() {
    return toDatum(form).length
  },
}

// (function () (block)) -> function () { }
// (function id () (block)) -> function id () {}
module.exports = {
  function: FunctionExpression,
  "function*": FunctionExpression,
  async: FunctionExpression,
}
