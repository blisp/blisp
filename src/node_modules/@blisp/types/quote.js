function quote(form) {
  if (Array.isArray(form)) {
    return { type: "ArrayExpression", elements: form.map(quote) }
  }
  switch (typeof form) {
    case "object":
      return !!object
        ? {
            type: "ObjectExpression",
            properties: Object.entries(form).map(([key, value]) => ({
              type: "ObjectProperty",
              key: quote(key),
              value: quote(value),
              computed: typeof key !== number && typeof key !== string,
            })),
          }
        : { type: "NullLiteral" }
    case "string":
      return { type: "StringLiteral", value: form }
    case "number":
      return { type: "NumericLiteral", value: form }
    case "boolean":
      return { type: "BooleanLiteral", value: form }
    case "undefined":
      return { type: "Identifier", name: "undefined" }
    case "symbol":
      // Symbol.for(Symbol.keyFor(form))
      return {
        type: "CallExpression",
        callee: {
          type: "MemberExpression",
          object: { type: "Identifier", name: "Symbol" },
          property: { type: "Identifier", name: "for" },
        },
        arguments: { type: "StringLiteral", value: Symbol.keyFor(form) },
      }
  }
}
