/**
 * (object
 *   (init key value)  -> key: value
 *   (method key params ...body) -> key(...params){ ...body}
 *   (computed (init key value))
 *   )
 */
function ObjectExpression(form, env) {
  return form.arguments.reduce(
    (obj, prop) => {
      obj.properties.push(expand(prop, env))
      return obj
    },
    {
      type: "ObjectExpression",
      properties: [],
      loc: form.loc,
    }
  )
}

ObjectExpression.type = "ObjectExpression"
ObjectExpression.helpers = {
  nth(form, n) {
    return n === 0
      ? { type: "Identifier", name: "object" }
      : form.properties[n - 1]
  },
  length(form) {
    return form.properties.length + 1
  },
}

module.exports = {
  object: ObjectExpression,
}
