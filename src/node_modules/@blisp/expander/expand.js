const { callExpression, identifier, isIdentifier } = require("@babel/types")
const resolve = require("./resolve")
module.exports = function expand(syntax, env) {
  switch (syntax.type) {
    case "ArrayExpression": {
      const first = expand(syntax.elements[0], env)
      const rest = syntax.elements.slice(1, syntax.elements.length)
      if (isIdentifier(first)) {
        const resolved = resolve(first.name, env)
        if (resolved) {
          return resolved(...rest)
        }
      }
      return callExpression(first, rest.map((s) => expand(s, env)))
    }
    case "SymbolLiteral":
      return identifier(Symbol.keyFor(syntax.name))
    default:
      return syntax
  }
}
