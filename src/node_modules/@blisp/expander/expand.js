const utils = require("@babel/types/lib/definitions/utils")
const defineType = utils.default
const assertValueType = utils.assertValueType
defineType("SymbolLiteral", {
  builder: ["name"],

  aliases: ["Expression", "PatternLike", "LVal", "TSEntityName"],

  fields: {
    name: {
      validate: assertValueType("string"),
    },

    optional: {
      validate: assertValueType("boolean"),

      optional: true,
    },
  },
})

const { callExpression, identifier, isIdentifier } = require("@babel/types")
const resolve = require("./resolve")

module.exports = function expand(syntax, env) {
  switch (syntax.type) {
    case "ArrayExpression": {
      const first = expand(syntax.elements[0], env)
      if (isIdentifier(first)) {
        const resolved = resolve(first.name, env)
        if (resolved) {
          // TODO: This is how we expand macro returning macros, but there
          // is probably a better way
          return expand(resolved(syntax, env), env)
        }
      }
      return callExpression(
        first,
        syntax.elements.slice(1).map((s) => expand(s, env))
      )
    }
    case "SymbolLiteral":
      return identifier(Symbol.keyFor(syntax.name))
    default:
      return syntax
  }
}
