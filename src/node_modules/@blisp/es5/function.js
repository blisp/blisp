const { functionExpression, isIdentifier } = require("@babel/types")
const addScope = require("@blisp/expander/addScope")
const extendEnv = require("@blisp/expander/extendEnv")
const expand = require("@blisp/expander/expand")

const resolve = require("@blisp/expander/resolve")
// (function foo (bar) (block (return bar)))
module.exports = function fn(form, env) {
  const args = rest(form)
  let id
  let params
  let body
  if (isIdentifier(first(args))) {
    id = first(args)
    params = second(args)
    body = third(args)
  } else {
    params = first(args)
    body = second(args)
  }
  return functionExpression(id, params, expand(addScope(body, scope), innerEnv))
}
