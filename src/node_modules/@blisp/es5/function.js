const { functionExpression, isIdentifier } = require("@babel/types")
const addScope = require("@blisp/expander/addScope")
const extendEnv = require("@blisp/expander/extendEnv")
const expand = require("@blisp/expander/expand")

const resolve = require("@blisp/expander/resolve")
// (function foo (bar) (block (return bar)))
module.exports = function fn(syntax, env) {
  const first = expand(syntax.elements[1], env)

  const [id, params, body] = isIdentifier(first)
    ? [first, syntax.elements[2], syntax.elements[3]]
    : [undefined, syntax.elements[1], syntax.elements[2]]

  const scope = Symbol()
  const scopes = new Set(syntax.scopes || new Set())
  scopes.add(scope)

  const paramIds = params.elements.map((param) =>
    addScope(expand(param, env), scope)
  )
  const innerEnv = extendEnv(
    env,
    paramIds.map((paramId) => [paramId.name, paramId]),
    scopes
  )

  if (id) {
    // add binding for id o env
  }

  return functionExpression(
    id,
    paramIds.map((paramId) => resolve(paramId.name, innerEnv, scopes)),
    expand(addScope(body, scope), innerEnv)
  )
}
